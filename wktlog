#!/usr/bin/php
<?php

function getLastLines($file,$linecount) {
	$linelength = 160; // Apache's logs are typically ~200+ chars
	// I've set this to < 200 to show the dynamic nature of the algorithm
	// offset correction.
	$fsize = filesize($file);

	// check if file is smaller than possible max lines
	$offset = ($linecount+1) * $linelength;
	if ($offset > $fsize) $offset = $fsize;

	$fp = fopen($file, 'r');
	if ($fp === false) exit;

	$lines = array(); // array to store the lines we read.

	$readloop = true;
	while($readloop) {
		// we will finish reading when we have read $linecount lines, or the file
		// just doesn't have $linecount lines

		// seek to $offset bytes from the end of the file
		fseek($fp, 0 - $offset, SEEK_END);

		// discard the first line as it won't be a complete line
		// unless we're right at the start of the file
		if ($offset != $fsize) fgets($fp);

		// tally of the number of bytes in each line we read
		$linesize = 0;

		// read from here till the end of the file and remember each line
		while($line = fgets($fp)) {
			array_push($lines, $line);
			$linesize += strlen($line); // total up the char count

			// if we've been able to get more lines than we need
			// lose the first entry in the queue
			// Logically we should decrement $linesize too, but if we
			// hit the magic number of lines, we are never going to use it
			if (count($lines) > $linecount) array_shift($lines);
		}

		// We have now read all the lines from $offset until the end of the file
		if (count($lines) == $linecount) {
			// perfect - have enough lines, can exit the loop
			$readloop = false;
		} elseif ($offset >= $fsize) {
			// file is too small - nothing more we can do, we must exit the loop
			$readloop = false;
		} elseif (count($lines) < $linecount) {
			// try again with a bigger offset
			$offset = intval($offset * 1.1);	// increase offset 10%
			// but also work out what the offset could be if based on the lines we saw
			$offset2 = intval($linesize/count($lines) * ($linecount+1));
			// and if it is larger, then use that one instead (self-tuning)
			if ($offset2 > $offset) $offset = $offset2;
			// Also remember we can't seek back past the start of the file
			if ($offset > $fsize) $offset = $fsize;
			//echo 'Trying with a bigger offset: ', $offset, "\n";
			// and reset
			$lines = array();
		}
	}

	// Let's have a look at the lines we read.
	return $lines;
}	
function tail($file, $callbackLine,$callbackSleep) {
	$curPosition = filesize($file);
	$curAtime = 0;
	$curSize = 0;

	$handle = fopen($file, 'r');
	while (file_exists($file)) {
		if(fileatime($file) == $curAtime) {
			$callbackSleep();
			continue;
		}
		if(filesize($file) < $curSize) {
			fclose($handle);
			$handle = fopen($file, 'r');
		}
		fseek($handle, $curPosition);
		while (!feof($handle)) {
			$callbackLine(fgets($handle));
		}
		$curPosition = ftell($handle);
	}
	fclose($handle);
}
class LogWriter {
	private $mode = 0;
	private $header = null;
	private $lines = array();
	
	private static function is_same_block($header, $string) {
		return substr($string,0,strlen($header))==$header;
	}
	private static function is_block_start($string) {
		if ($string{0}!='[' || $string{21}!=']') return false;
		if (strpos($string,'PHP Notice')===false &&strpos($string,'PHP Warning')===false && strpos($string,'PHP Fatal error')===false && strpos($string,'PHP Parse error')===false) return false;
		return true;
	}
	private static function make_header($string) {
		return substr($string,0,22);
	}
	private static function begin_lines($string) {
		return array($string);
	}
	private static function get_line($string) {
		return $string;
	}
	
	public function processLine($string) {
		if ($this->mode==1) {
			if (self::is_same_block($this->header,$string)) {
				$this->lines[] = self::get_line($string);
			} else {
				$this->writeLines();
			}
		}
		if ($this->mode==0) {
			if (self::is_block_start($string)) {
				$this->mode = 1;
				$this->header = self::make_header($string);
				$this->lines = self::begin_lines($string);
			}
		}
	}
	public function writeLines() {
		if ($this->mode==1) {
			$this->mode = 0;
			echo $this->lines[0];
		}
	}
}

for ($i=1;$i<count($argv);$i++) {
	$lw = new LogWriter();
	$file = $argv[$i];
	foreach (getLastLines($file,10) as $line) {
		$lw->processLine($line);
	}
	$lw->writeLines();
	tail($file,function($s) use ($lw) {$lw->processLine($s);}, function()use($lw) {$lw->writeLines();});
}
/*

	mb_internal_encoding('utf8');
	$content = array('<div><table>');
	$i = 0;
	while (!feof(STDIN)) {
		$line = fgets(STDIN);
		$content[] = ($i&1)?'<tr class="odd">':'<tr>';
		foreach (explode("\t",trim($line)) as $val) {
			if (!$i) {
				$content[] = '<th>'.htmlspecialchars($val).'</th>';
			} else {
				$content[] = '<td>'.htmlspecialchars($val).'</td>';
			}
		}
		$content[] = '</tr>';
		$i++;
	}
	$content[] = '</table></div>';
	
	$content = implode('',$content);
	echo chr(27).'!'.mb_strlen($content).'!';
	echo $content;
*/